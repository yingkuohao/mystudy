package com.mylearn.cache;

import java.util.Map;
import java.util.concurrent.*;

/**
 * Created by IntelliJ IDEA.
 * User: yingkuohao
 * Date: 13-11-5
 * Time: ????3:05
 * CopyRight:360buy
 * Descrption:
 * To change this template use File | Settings | File Templates.
 */
public class CacheUtil3<K, V> implements Computable<K, V> {

    private final ConcurrentHashMap<K, Future<V>> map = new ConcurrentHashMap<K, Future<V>>();  //value???future

    private final Computable computable;

    public Computable getComputable() {
        return computable;
    }

    public CacheUtil3(Computable computable) {
        this.computable = computable;
    }

    /**
     * ?????????????????????????????????4?????b?????????????????????????????????????
     * ??????????}????????????????????????  if (future == null) ???????????????????§³?????
     * ???}????????§á???????????????compute4??????????????}???????????????????????????????????
     *
     *   ??????    map.putIfAbsent(arg, futureTask);
     *
     * @param arg
     * @return
     * @throws InterruptedException
     */
    public V compute(final K arg) throws InterruptedException {

        Future<V> future = map.get(arg);
        if (future == null) {
            //???future???????????????new???????????
            Callable<V> callable = new Callable<V>() {
                public V call() throws InterruptedException {
                    Object newValue = computable.compute(arg);
                    return (V) newValue;
                }
            };

            FutureTask<V> futureTask = new FutureTask<V>(callable); //?????????????FutureTask

            future = futureTask;    //??future?????????????????? if (future != null) ??
            map.put(arg, futureTask);  //?????? ??????  Future<V> future = map.get(arg);????
//            map.putIfAbsent(arg, futureTask);
            futureTask.run();    //????????????call?????????compute
        }
        //????????????????????????
        try {
            return future.get();  //????????????b??????????????????????????????
        } catch (ExecutionException e) {
            throw new InterruptedException(e.getMessage());
        }

    }
}
