package com.mylearn.cache;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;

/**
 * Created by IntelliJ IDEA.
 * User: yingkuohao
 * Date: 13-11-5
 * Time: ????3:05
 * CopyRight:360buy
 * Descrption:
 * ????§Õ??4????????????map????????
 * 1. map??get?????????????????????????
 * 2. map??put??????????????????????§Õ??????c????????????§Õ??
 * ??????????????§Õ??????4??????§Õ???????????????
 * <p/>
 * ???
 * 1.???????????JUC?????????ConcurrentHashMap???????????????????
 * 2.???????????????????????????????§Þ???????????????????????value??????????????§Þ???
 * ???????????????????
 * To change this template use File | Settings | File Templates.
 */
public class CacheUtil1<K, V> implements Computable<K, V> {

    private final ReadWriteLock lock = new ReentrantReadWriteLock(); //?????§Õ??
    private final Lock readLock = lock.readLock();
    private final Lock writeLock = lock.writeLock();

    Map<K, V> map = new HashMap<K, V>();

    private Computable computable;

    public Computable getComputable() {
        return computable;
    }

    public void setComputable(Computable computable) {
        this.computable = computable;
    }

    /**
     * readLock4????c????????c?????§Õ
     *
     * @param arg
     * @return
     */
    public V get(K arg) {
        readLock.lock();
        try {
            return map.get(arg);
        } finally {
            readLock.unlock();
        }
    }

    /**
     * §Õ??§Õ???????????????§Õ????????§Õ??????
     *
     * @param key
     * @param value
     * @return
     */
    public V put(K key, V value) {
        writeLock.lock();
        try {
            return map.put(key, value);
        } finally {
            writeLock.unlock();
        }
    }

    /**
     * @param arg
     * @return
     * @throws InterruptedException
     */
    public V compute(K arg) throws InterruptedException {

        V value = this.get(arg);
        if (value == null) {
            Object newValue = computable.compute(arg);
            value = (V) newValue;
            this.put(arg, value);
        }
        return value;
    }
}
