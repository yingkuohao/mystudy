package com.mylearn.cache;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/**
 * Created by IntelliJ IDEA.
 * User: yingkuohao
 * Date: 13-11-5
 * Time: ????3:05
 * CopyRight:360buy
 * Descrption:
 * ConcurrentHashMap??????????¦Å???????HashMap?????????????segment??
 * ?4??????????????HashMap?????????????HashMap?????n??segment?????segment?????
 * ?????4??????????????1/n,?????????????n????
 * <p/>
 * ????get??????????????volatile??4???value??count??????u???????????volatile?????????4????????????
 * ????put???????????segment??????????put???????????????????WriteLock?????????????????????HashMap????
 * ????????????HashMap?????segment????????????????????segment????????????????§Ú??????????
 * To change this template use File | Settings | File Templates.
 */
public class CacheUtil2<K, V> implements Computable<K, V> {

    ConcurrentHashMap<K, V> map = new ConcurrentHashMap<K, V>();

    private Computable computable;

    public Computable getComputable() {
        return computable;
    }

    public void setComputable(Computable computable) {
        this.computable = computable;
    }

    /**
     * ConcurrentHashMap????????????JUC??????4????synchronized??????????????
     * ?????????CacheUtil1?§Ö?compute??????????????4????????
     * ??????????????compute???????????§Þ????¦Å?????
     * ????????????????????????????????????????????????§µ?????????????????
     * ????????????????4??? ?????X???????f(27)????????????????????????f(27)?????
     * ?????????§¹????????????X???????????????????—If??27??????????????
     * <p/>
     * ?????????????????????????????FutureTask??FutureTask??????????????????
     * ??????????????????????????§³?????§ß?????????get????????b???????????????????????
     * ?????4????????
     *
     * @param arg
     * @return
     * @throws InterruptedException
     */
    public V compute(K arg) throws InterruptedException {

        V value = map.get(arg);
        if (value == null) {
            Object newValue = computable.compute(arg);
            value = (V) newValue;
            map.put(arg, value);
        }
        return value;

    }
}
