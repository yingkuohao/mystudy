package com.mylearn.algorithm.sort;


import org.apache.commons.lang.StringUtils;

/**
 * Created by IntelliJ IDEA.
 * User: yingkuohao
 * Date: 13-9-11
 * Time: ????9:52
 * CopyRight:360buy
 * Descrption:
 * ???????????????????????????????????h?????h?????????????????????h??????§ß?????????????????
 * ?????????  ???????§µ?????????????????1  ??????????? ??n-1??/2 ??????????
 * <p/>
 * <p/>
 * To change this template use File | Settings | File Templates.
 */
public class HeapSort {

    public static void main(String args[]) {
        Integer[] integers = new Integer[]{12, 15, 9, 24, 6, 31, 10};
        HeapSort heapSort = new HeapSort();
        System.out.println("?????" + StringUtils.join(integers, ","));
//        heapSort.creatHeap(integers);
//        heapSort.creatHeap2(integers);
        /*       System.out.println("???" + StringUtils.join(integers, ","));
    integers = heapSort.insert(integers, integers.length, 2);*/
        heapSort.delete(integers);
        System.out.println("???" + StringUtils.join(integers, ","));


        Integer[] bigData = new Integer[]{1,2,3,4,5,6,7,8,9,10,11 ,12 ,13 ,14 ,15 ,16 ,17 ,18 ,19 ,20 ,21 ,22 ,23 ,24 ,25 ,
                26 ,27 ,28 ,29 ,30 ,31 ,32 ,33 ,34 ,35 ,36 ,37 ,38 ,39 ,40 ,41 ,42 ,43 ,44 ,45 ,46 ,47 ,48 ,49 ,50 ,51 ,52 ,
                53 ,54 ,55 ,56 ,57 ,58 ,59 ,60 ,61 ,62 ,63 ,64 ,65 ,66 ,67 ,68 ,69 ,70 ,71 ,72 ,73 ,74 ,75 ,76 ,77 ,78 ,79 ,
                80 ,81 ,82 ,83 ,84 ,85 ,86 ,87 ,88 ,89 ,90 ,91 ,92 ,93 ,94 ,95 ,96 ,97 ,98 ,99 ,100,101,102,103,104,105,106,107,108,
        };

        Integer[] result =  heapSort.testBigData(bigData,10);
        System.out.println("???" + StringUtils.join(result, ","));
    }

    private void execute(Integer[] integers) {
        //To change body of created methods use File | Settings | File Templates.
    }

    /**
     * ???????????????
     *
     * @param integers
     */
    public void creatHeap(Integer[] integers) {

        int n = integers.length;
        for (int i = (n - 1) / 2; i >= 0; i--) {
            //???????????????????????¦Ë????????????????n-1??/2 ???????????????
            int target = integers[i];

            int left = 2 * i + 1;//????
            int right = 2 * i + 2;    //?????
            while (left < n) {

                if (right < n) {
                    //??????????????????????????§³???????¡À?
                    int j = left;
                    if (integers[right] < integers[left]) {
                        j = right;
                    }
                    //????§³???????????????????????????§³?????
                    if (integers[j] < target) {
                        int parent = (left - 1) / 2;  //????i???????????????????????¦Ë?????
                        integers[parent] = integers[j];
                        integers[j] = target;
                        left = 2 * j + 1;     //?????????????
                        right = 2 * j + 2;
                    } else {
                        break;
                    }
                } else {
                    //????????,??????????????????????
                    if (integers[left] < target) {
                        integers[i] = integers[left];
                        integers[left] = target;
                    }
                    break;
                }
            }
        }

    }


    /**
     * ???·Ú
     *
     * @param integers
     */
    public void creatHeap2(Integer[] integers) {

        int n = integers.length - 1;  //?????¡À??0??????????????n????????
        for (int i = (n - 1) / 2; i >= 0; i--) {
            //???????????????????????¦Ë????????????????????????????????h-1?????????????????n-1??/2 ???????????????
            genereate(integers, i, n);
        }

    }

    private void genereate(Integer[] integers, int parent, int n) {
        int target = integers[parent];

        //??????????????????????????????????
        while (parent <= (n - 1) / 2) {
            int left = 2 * parent + 1;     //?????????????
            int right = 2 * parent + 2;
            //??????????????????????????§³???????¡À?
            int j = left;
            if (right < n && integers[right] < integers[left]) {
                j = right;
            }
            //????§³???????????????????????????§³?????
            if (integers[j] < target) {
                integers[parent] = integers[j];
                integers[j] = target;
                parent = j;  //????i???????????????????????¦Ë?????
            } else {
                break;
            }
        }

    }


    /**
     * ????§³??? ?????????????????????????¦Ë?¨¢?????§³?????????????????????????¦Ë????????????¦Ë??
     * ???????????????????????¡¤????????¨À?
     *
     * @param integers ???????
     * @param i        ????¦Ë??
     * @param value    ?????
     * @return
     */
    public Integer[] insert(Integer[] integers, int i, Integer value) {
        Integer[] tmp = integers;
        if (i >= integers.length) {
            tmp = new Integer[integers.length * 2];
            System.arraycopy(integers, 0, tmp, 0, integers.length);
        }
        tmp[i] = value;

        insertMinHeap(tmp, i);
        return tmp;
    }


    /**
     * ????§³???
     *
     * @param integers ??????
     * @param i        ?????¦Ë??
     */
    private void insertMinHeap(Integer[] integers, int i) {

        Integer temp = integers[i];
        int parent = (i - 1) / 2;
        while (parent >= 0 && i > 0) {
            //????????????§³??????
            if (integers[parent] <= temp) {
                break;
            } else {
                //??????????????????????,?????????????????????????????????????????????????????????????????§³
                integers[i] = integers[parent];
                integers[parent] = temp;
                i = parent;
                parent = (i - 1) / 2;
            }
        }
    }


    /**
     * ???§³???
     * ?????????????????????????????????????????¦Ë????????????
     *
     * @param integers
     */
    public void delete(Integer[] integers) {
        //??????¦Â???
        integers[0] = integers[integers.length - 1];
        integers[integers.length - 1] = null;
        deleteMinHeap(integers); //????§³???
    }

    /**
     * ????§³???
     *
     * @param integers
     */
    private void deleteMinHeap(Integer[] integers) {
        Integer root = integers[0];
        int parent = 0;
        int left = 1;
        int right = 2;
        while (left < integers.length - 1) {
            //????????????§³???
            int min = left;
            //???????????????????????????????????????????§Ø??????????????????????????????
            if (integers[right] != null && integers[left] > integers[right]) {
                min = right;
            }
            //?????????????????????????????§³?§³??
            if (root < integers[min]) {
                break;
            } else {
                //?????§Ü?????§³?????????????parent??left??right???
                integers[parent] = integers[min];
                integers[min] = root;
                parent = min;
                left = min * 2 + 1;
                right = min * 2 + 2;
            }

        }

    }


    /**
     * ???????top n???
     * 1. ????????n??§³????
     * 2. ????????????????????????????
     * 3. ???3????????¨®??§³????§Ö??????§Ò?????????????§³??????top n?????
     *
     * ?????top n??????????§³???
     *         top n??§³??????????
     * @param bigData
     * @param top
     * @return
     */
    public Integer[] testBigData(Integer[] bigData, int top) {
        //1.????§³???
        Integer[] minHeap = new Integer[top];
        System.arraycopy(bigData, 0, minHeap, 0, top);
        this.creatHeap(minHeap);
        //2.????????
        Integer root = minHeap[0];

        for (int i = top; i < bigData.length; i++) {
            Integer curData = bigData[i];
            if (curData > root) {
                minHeap[0] = curData;
                creatHeap(minHeap);
            }
        }
        return minHeap;
    }


}
