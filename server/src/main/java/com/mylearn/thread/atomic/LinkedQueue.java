package com.mylearn.thread.atomic;

import java.util.concurrent.atomic.AtomicReference;

/**
 * Created by IntelliJ IDEA.
 * User: yingkuohao
 * Date: 13-11-8
 * Time: ????3:14
 * CopyRight:360buy
 * Descrption:  Michael-Scott?????????ß÷??????
 * ?????????????????????????}????????????????????????next?????????l????ß“??¶¬??
 * ??????¶¬???????????????????????}???????????ß’???????ßﬁ??????????¶»???????
 * ???ßﬂ???¶ƒ??????????
 * <p/>
 * ?????ß’???????????¶¬????next???????????ß’????ßﬁ????????tail.next???????????¶ ????
 * ?????????tail.next4??????ß÷?????????????????ß’????ßﬁ?????????????¶¬??????????????
 * ???????????????????ß÷????????????????ß›??????????
 * To change this template use File | Settings | File Templates.
 */
public class LinkedQueue<E> {
    private static class Node<E> {
        final E item;
        final AtomicReference<Node<E>> next;

        private Node(E item, Node<E> next) {
            this.item = item;
            this.next = new AtomicReference<Node<E>>(next);
        }

        private final Node<E> dummy = new Node<E>(null, null);    //????
        private final AtomicReference<Node<E>> head = new AtomicReference<Node<E>>(dummy);  //????
        private final AtomicReference<Node<E>> tail = new AtomicReference<Node<E>>(dummy);   //¶¬???

        public boolean put(E item) {
            Node<E> newNode = new Node<E>(item, null);
            while (true) {
                Node<E> curTail = tail.get();
                Node<E> tailNext = curTail.next.get();

                if (curTail == tail.get()) {
                    if (tailNext != null) {                         //A  ???ß’????ßﬁ??????????????????????C????tail??next?????????tail??????????????ß÷??????????
                        //???¶¬???,??????????????,??????????????D??????????????????????????????????ß÷???
                        tail.compareAndSet(curTail, tailNext);   //B
                    } else {   // ???ß’??????????tail???????????????
                        if (curTail.next.compareAndSet(null, newNode)) { //C  CAS??????????????tail??next???????
                            tail.compareAndSet(curTail, tailNext);           //D   CAS???????????tail????????????tail??next
                            return true;
                        }
                    }
                }
            }
        }

        /*
        *     put?????????????????????????????????ßﬁ???????A??????????????????????????????????C??D?????
        * ??????????????????????????????????????????????¶¬??????????????B???????????????????
        * ??ÔÖ?????????????????????????????????????¶¬????????????ß’????????????????????????????
        *
        *   ????C?ß÷?CAS??????l???????¶¬??????????}?????????????????????CAS????????????????????????????
        *   ????????????¶ ¶¡Å£???????????????????????¶¬?????????????C??????????????????ßπ???????CAS
        *   ???????????????????????????????ß”??????????4??ßµ?????????????¶ ????4??ß≥????D??????????
        *   ????????????????????????????CAS?????????????????????????????B????????????
        *
        *      ???????????????????¶ ???????????????????????????????????????tail.next?????4?ßÿ???????
        *      ??????ß≥?????????????¶¬?????????ß’??????????
        * */
    }
}
